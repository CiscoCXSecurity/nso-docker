
* Goals, assumptions & use cases
  - build images for production and development + CI
  - split between persistent data (docker shared volume) vs what goes into container
  - SSH host key belongs to persistent data
    - and SSL certs?
  - CDB persistent
  - logs persistent
  - NSO itself comes in container image
  - packages comes in container image
    - do package reload (force) on docker container startup
      - we should always use the packages that come in the container image
  - user creation on startup
  - monitor NSO liveness and report as container health
  - cleanly shut down NSO on container stop
  - make sure ncs-backup script works
  - sane defaults
  - things should work out of the box
  - describe 

* TODO figure out docker image tag
  - use CI_JOB_ID if available as docker image tag
    - i.e. if we run in CI then we build an image that is tagged with the job ID, like 12345
    - it is unique - does not overwrite / reassign the tag in the registry so that other builds that use our image as a build fails
  - if not available, we use something else.. what?


* TODO Decide how to do volumes
  - [ ] one volume vs many volumes?
    - CDB
  - [ ] logs go where?
    - some might want to persist logs
    - if syslog is used, no point in persisting logs locally
      - this means it should probably be separated from the persistent volume containing CDB etc

  | folder      | configurable? |                                                                           |
  |-------------+---------------+---------------------------------------------------------------------------|
  | backups     |               |                                                                           |
  | cdb         | true          |                                                                           |
  | packages    | true          |                                                                           |
  | rollbacks   | true          |                                                                           |
  | scripts     | true          |                                                                           |
  | state       | true          |                                                                           |
  | storedstate |               | is it even used?                                                          |
  | streams     |               | used? ncs.confg per default seems to place notification streams in /state |
  | target      |               |                                                                           |

  Working theory:
  - set /ncs as rundir, meaning all of the above will default there
  - use /ncs-log for logs
    - this allows placement of logs in a shared volume for persistence
    - ... or NOT, in which case they are placed in the container and will be wiped on restart / upgrade
      - good for when logs are primarily shipped to some remote endpoint anyway
    - keeping it in separate directory decouples the decision of where to log from how to use the /ncs shared volume (which ~ 100% of production users will want to set)
  - configure packages directory in config file to point to /packages
* TODO figure out SSL story for HTTPS webUI
  Should we generate random certs on startup? It sure helps for dev / CI environment. Maybe option through environment variable?
  Should webUI be enabled per default (I think no) - enable by env var.

* TODO test that status thing works
  - suspect it doesn't when backup is running, so load lots of data (many gigabytes) into NCS, do backup which should then take considerable time and see what happens to status check meanwhile
  - or rather, when doing ~request packages reload~
    - can build fake package that takes long to load, like have CDB upgrade logic with a sleep?

* DONE expose what ports?
  CLOSED: [2019-09-24 Tue 08:40]
  - State "DONE"       from "TODO"       [2019-09-24 Tue 08:40]
  - remember, it is always possible to expose and publish any port in docker just using ~-p~ - this is about what is exposed per default

  | port | use          | exp | CHG | comment                              |
  |------+--------------+-----+-----+--------------------------------------|
  |  830 | NETCONF      | yes |     |                                      |
  | 2022 | SSH CLI      | yes |  22 |                                      |
  | 2023 | telnet CLI   | no  |     | insecure, prefer SSH CLI             |
  | 4334 | NC call-home | yes |     |                                      |
  | 4569 | IPC          | no  |     | used by CLI, no need for remote CLI? |
  | 8080 | Web UI       | yes |  80 |                                      |

** DONE Change default ports
   CLOSED: [2019-09-24 Tue 08:40]
   - State "DONE"       from "TODO"       [2019-09-24 Tue 08:40]
   - NCS listens per default on high ports (to avoid requiring root probably)
   - in a container we are root, makes sense to switch to default ports for service, like 22 for SSH or 80 for web (not 8080)
   - switch ports!

* DONE generate ncs.conf at run time
  CLOSED: [2019-09-24 Tue 08:43]
  - State "DONE"       from "TODO"       [2019-09-24 Tue 08:43]
  We want to allow various options to be passed in that controls the way NCS is run. This is configured in NCS by editing ncs.conf and so we must generate ncs.conf at run time after collecting the relevant arguments.

  We *could* potentially ship a ncs.conf that is primed as a template, i.e. certain values are replaced with something like ~{{foo}}~ for value substitution but this is dangerous as we want to have one Dockerfile etc recipe but support ncs.conf of many different NCS versions. It is assumed that there are changes made to ncs.conf with new versions and so statically shipping one ncs.conf means it is likely that we will somehow break things by replacing it.
  
  Instead, we want to use the ncs.conf that is installed by the NSO install file but modify it such that it can be used as a template.. or well, just modify it really. ncs.conf is an XML file and so it is not trivial to do this with sed. We need XML aware tools.
* DONE Document use of NSO_INSTALL_FILES_DIR
  CLOSED: [2019-09-24 Tue 10:12]
  - State "DONE"       from "TODO"       [2019-09-24 Tue 10:12]
  - the path in which the build process looks for the NSO install file(s) is specified by NSO_INSTALL_FILES_DIR
    - the default value i ~nso-install-files/~
  - this means we can deliver the NSO install files to the build process in two different ways
  - either commit NSO install file to the repo in the ~nso-install-files/~ directory
    - this directory is set up to track ~*.bin~ files using git LFS (see .gitattributes file)
  - OR set NSO_INSTALL_FILES_DIR environment variable to another path
    - like ~/nso-install-files~ and make this path available on the CI runner
    - thus we never commit the NSO install files to git, we just upload them to the CI runner
* TODO use python3 per default
  Python2 is EOL so no point in even giving a choice.
  How do we switch to python3? Just updated the ncs-start-python-vm script to read python3? Alternative is to symlink (update-alternatives?) on the system to ~python~ actually points to ~python3~ but that feels sort of weird, bending the system distribution a bit much just to please NSO.
* TODO add Docker healthcheck
* TODO add test cases
** TODO test SSH key is generated at run time
   Start container multiple times and ensure we see different SSH keys
** TODO test SSH key is persisted on persistent volume
   Start container multiple times with a persistent volume on /ncs and ensure the SSH key stays the same.
* Decision validation
  A list of design decisions I've taken that we should validate with another brain.
  - [ ] rewrite of /opt/ncs/current/bin/ncs-start-python-vm to directly use python3
  - [ ] web UI HTTP / HTTPS enabled per default? (KLL thinks no)
  - [ ] SSH CLI, NETCONF, NETCONF call-home enabled per default! (KLL opinion)
